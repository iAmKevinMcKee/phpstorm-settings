<templateSet group="Vue">
  <template name="vsubmit" value="&lt;template&gt;&#10;    &lt;div id=&quot;add-$LCD$&quot; :class=&quot;type&quot;&gt;&#10;        &lt;div class=&quot;form-row&quot; v-on:keyup.enter=&quot;onSubmit&quot; @keydown=&quot;errors.clear($event.target.name)&quot;&gt;&#10;&#10;            &lt;div class=&quot;form-group col-12&quot;&gt;&#10;                &lt;button class=&quot;btn btn-primary btn-block&quot; @click=&quot;onSubmit&quot; :disabled=&quot;errors.any()&quot; v-show=&quot;!showSuccessButton &amp;&amp; !errors.any()&quot;&gt;&#10;                    Submit&#10;                &lt;/button&gt;&#10;                &lt;button class=&quot;btn btn-success btn-block&quot; disabled v-show=&quot;showSuccessButton&quot;&gt;&#10;                    Success!&#10;                &lt;/button&gt;&#10;                &lt;button class=&quot;btn btn-danger btn-block&quot; disabled v-show=&quot;errors.any()&quot;&gt;&#10;                    Fix Errors&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;&#10;    export default {&#10;        props: ['type'],&#10;        data() {&#10;            return {&#10;                errors: new Errors(),&#10;                showSuccessButton: false,&#10;                $MODEL$: {}&#10;            }&#10;        },&#10;        created() {&#10;            if(this.type == 'patch') {&#10;                VueEvent.listen('edit-this-$LCD$', (object) =&gt; this.onOpen(object));&#10;            }&#10;        },&#10;        methods: {&#10;            onSubmit() {&#10;                if (this.type == 'post') {&#10;                    axios.post('/api/$API$', this.$MODEL$)&#10;                        .then(this.onSuccess)&#10;                        .catch(error =&gt; this.errors.record(error.response.data.errors));&#10;                } else if (this.type == 'patch') {&#10;                    axios.patch('/api/$API$/' + this.$MODEL$.id, this.$MODEL$)&#10;                        .then(this.onSuccess)&#10;                        .catch(error =&gt; this.errors.record(error.response.data.errors));&#10;                }&#10;            },&#10;            onSuccess(response) {&#10;                VueEvent.fire('add-$LCD$');&#10;                if (this.type == 'patch') {&#10;                    VueEvent.fire('success-close-modal');&#10;                } else if (this.type == 'post') {&#10;                    this.$MODEL$ = { application_id: this.applicationId };&#10;                    // reset the form&#10;                    $('.selectpicker').val('default').selectpicker('deselectAll');&#10;                    $('.selectpicker').selectpicker('refresh');&#10;                }&#10;                // success button&#10;                this.showSuccessButton = true;&#10;                setTimeout(() =&gt; this.showSuccessButton = false, 1000);&#10;               &#10;            },&#10;            onOpen(object) {&#10;                this.$MODEL$ = object;&#10;                // Ensure selects are chosen properly when data is loaded&#10;                //$('.patch select[name=equipment_type]').val(this.experience.equipment_type);&#10;                //$('.selectpicker').selectpicker('refresh');&#10;            }&#10;        }&#10;    }&#10;&lt;/script&gt;" description="Template for vue submit" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LCD" expression="lowercaseAndDash(MODEL)" defaultValue="" alwaysStopAt="false" />
    <variable name="API" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Vue" value="true" />
    </context>
  </template>
  <template name="vshow" value="&lt;template&gt;&#10;    &lt;div&gt;&#10;        &lt;ct-table id=&quot;$LCD$&quot; :datatables=false&gt;&#10;            &lt;thead&gt;&#10;                &lt;th class=&quot;fit&quot; v-if=&quot;windowWidth &lt; 767&quot;&gt;&lt;/th&gt;&#10;                &lt;!--columns go here--&gt;&#10;                $END$&#10;                &lt;th class=&quot;fit&quot; v-if=&quot;windowWidth &gt;= 767&quot;&gt;&lt;/th&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody ref=&quot;tbody&quot;&gt;&#10;            &lt;tr v-for=&quot;($MODEL1$, index) in $MODEL$&quot;&gt;&#10;                &lt;td v-if=&quot;windowWidth &lt; 767&quot; class=&quot;td-actions text-right fit&quot;&gt;&#10;                    &lt;button type=&quot;button&quot; rel=&quot;tooltip&quot; class=&quot;btn btn-primary&quot; @click=&quot;editModal(index)&quot;&gt;&#10;                        &lt;i class=&quot;material-icons&quot;&gt;edit&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button type=&quot;button&quot; rel=&quot;tooltip&quot; class=&quot;btn btn-danger&quot; @click=&quot;deleteModal($MODEL1$.id, index)&quot;&gt;&#10;                        &lt;i class=&quot;material-icons&quot;&gt;close&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                &lt;/td&gt;&#10;&#10;                &lt;td v-if=&quot;windowWidth &gt;= 767&quot; class=&quot;td-actions text-right fit&quot;&gt;&#10;                    &lt;button type=&quot;button&quot; rel=&quot;tooltip&quot; class=&quot;btn btn-primary&quot; @click=&quot;editModal(index)&quot;&gt;&#10;                        &lt;i class=&quot;material-icons&quot;&gt;edit&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button type=&quot;button&quot; rel=&quot;tooltip&quot; class=&quot;btn btn-danger&quot; @click=&quot;deleteModal($MODEL1$.id, index)&quot;&gt;&#10;                        &lt;i class=&quot;material-icons&quot;&gt;close&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;/tbody&gt;&#10;        &lt;/ct-table&gt;&#10;        &lt;ct-modal v-show=&quot;showModal&quot; width=&quot;40%&quot;&gt;&#10;            &lt;!--submit component here--&gt;&#10;            &#10;        &lt;/ct-modal&gt;&#10;    &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;&#10;    export default {&#10;        props: {&#10;            confirmDelete: { type: Boolean, default: true }&#10;        },&#10;        data() {&#10;            return {&#10;                $MODEL$: [],&#10;                windowWidth: 0,&#10;                showModal: false,&#10;                beforeEditingCache: {},&#10;                cacheIndex: Number&#10;            }&#10;        },&#10;        created() {&#10;            this.get();&#10;        },&#10;        mounted() {&#10;            VueEvent.listen('add-$LCD$', () =&gt; this.get());&#10;            VueEvent.listen('close-modal', () =&gt; this.closeModal());&#10;            VueEvent.listen('success-close-modal', () =&gt; this.successCloseModal());&#10;            this.$nextTick(() =&gt; {&#10;                window.addEventListener('resize', () =&gt; {&#10;                    this.windowWidth = window.innerWidth&#10;                });&#10;            });&#10;            this.calculateWidth();&#10;        },&#10;        methods: {&#10;            get() {&#10;                axios.get('/api/$API$', {&#10;                })&#10;                    .then(response =&gt; this.$MODEL$ = response.data)&#10;                    .catch(error =&gt; console.log(response.data));&#10;            },&#10;            deleteModal(id, index) {&#10;                console.log(this.confirmDelete);&#10;                if(this.confirmDelete == true) {&#10;                    swal({&#10;                        title:&quot;Are You Sure?&quot;,&#10;                        text: &quot;Do you want to delete this item?&quot;,&#10;                        type: &quot;question&quot;,&#10;                        showCancelButton: true,&#10;                        cancelButtonClass: &quot;btn btn-white&quot;,&#10;                        buttonsStyling: false,&#10;                        confirmButtonClass: &quot;btn btn-primary&quot;&#10;                    })&#10;                        .then((result) =&gt; {&#10;                            if (result == true) {&#10;                                this.delete$CAPMODEL$(id);&#10;                            }&#10;                        })&#10;                        .catch(error =&gt; console.log(error.response));&#10;                } else {&#10;                    this.delete$CAPMODEL$(id);&#10;                }&#10;&#10;            },&#10;            delete$CAPMODEL$(id) {&#10;                axios.delete('/api/$API2$/' + id)&#10;                    .then(() =&gt; {&#10;                        this.get();&#10;                    })&#10;                    .catch(error =&gt; console.log(error.response));&#10;            },&#10;            calculateWidth() {&#10;                this.windowWidth = window.innerWidth || document.documentElement.clientWidth&#10;                    || document.body.clientWidth;&#10;            },&#10;            editModal(index) {&#10;                this.showModal = true;&#10;                this.beforeEditingCache = Object.assign({}, this.$MODEL$[index]);&#10;                this.cacheIndex = index;&#10;                VueEvent.fire('edit-this-$LCD$', this.$MODEL$[index]);&#10;               &#10;            },&#10;            closeModal() {&#10;                this.showModal = false;&#10;                this.$MODEL$[this.cacheIndex] = this.beforeEditingCache;&#10;            },&#10;            successCloseModal() {&#10;                setTimeout(() =&gt; {&#10;                    this.showModal = false&#10;                }, 1000);&#10;            }&#10;        }&#10;    }&#10;&lt;/script&gt;" description="Show model with edit and delete" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LCD" expression="lowercaseAndDash(MODEL)" defaultValue="" alwaysStopAt="false" />
    <variable name="MODEL1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="API" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="API2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAPMODEL" expression="capitalize(MODEL1)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="Vue" value="true" />
    </context>
  </template>
</templateSet>